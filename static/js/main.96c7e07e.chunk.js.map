{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","useState","results","setResults","query","setQuery","loading","setLoading","error","setError","searchInputRef","useRef","useEffect","getResults","a","async","axios","get","response","data","hits","className","style","classes","action","onSubmit","event","preventDefault","type","onChange","target","value","ref","onClick","current","focus","map","result","key","objectID","href","url","title","message","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,mBCDD,WAAe,IAAD,EAEEC,mBAAS,IAFX,mBAEpBC,EAFoB,KAEZC,EAFY,OAGFF,mBAAS,eAHP,mBAGpBG,EAHoB,KAGdC,EAHc,OAIEJ,oBAAS,GAJX,mBAIpBK,EAJoB,KAIZC,EAJY,OAKFN,mBAAS,MALP,mBAKpBO,EALoB,KAKdC,EALc,KAMrBC,EAAiBC,mBAEzBC,qBAAW,WACTC,MACE,IAEJ,IAAMA,EAAa,0BAAAC,EAAAC,OAAA,gEAEfR,GAAW,GAFI,WAAAO,EAAA,MAGQE,IAAMC,IAAN,oDAAuDb,KAH/D,OAGTc,EAHS,OAIff,EAAWe,EAASC,KAAKC,MAJV,gDAMfX,EAAS,EAAD,IANO,QASjBF,GAAW,GATM,yDAsBjB,OACE,oCACA,yBAAKc,UAAU,sDAGAC,MAAOC,KACpB,wBAAIF,UAAU,uCAAd,cAIF,0BAAMA,UAAU,SAEdG,OAAO,GAAGC,SAtBK,SAAAC,GACnBA,EAAMC,iBACNd,MAqBE,2BACIe,KAAK,OACLC,SAAW,SAAAH,GAAK,OAAIrB,EAASqB,EAAMI,OAAOC,QAC1CA,MAAO3B,EACP4B,IAAKtB,EACLW,UAAU,yBAIV,4BAAQA,UAAU,kCAEhBO,KAAK,UAFP,UAGA,4BAAQP,UAAU,2CAIhBO,KAAK,SAASK,QAlCE,WACxB5B,EAAS,IACTK,EAAewB,QAAQC,UA4BjB,UAMH7B,EAAS,yBAAKe,UAAU,6BAAf,sBAAuE,4BAE/EnB,EAAQkC,KAAI,SAAAC,GAAM,OAChB,wBAAIC,IAAKD,EAAOE,UACd,uBAAGlB,UAAU,2CAGXmB,KAAMH,EAAOI,KAAMJ,EAAOK,YAKnClC,GAAS,yBAAKa,UAAU,0BAA0Bb,EAAMmC,aD5E3C,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.96c7e07e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nif(module.hot){\n    module.hot.accept();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React , { useState , useEffect , useRef }from 'react';\nimport axios from 'axios';\nimport classes from './App.css';\n\nexport default function App(){\n\n  const [results,setResults] = useState([]);\n  const [query,setQuery] = useState(\"react hooks\");\n  const [loading,setLoading] = useState(false);\n  const [error,setError] = useState(null);\n  const searchInputRef = useRef();\n\nuseEffect( ()=> {\n  getResults();\n  },[]  );\n\nconst getResults = async () => {\n  try{\n    setLoading(true);\n    const response = await axios.get(`http://hn.algolia.com/api/v1/search?query=${query}`);\n    setResults(response.data.hits);\n  }catch(err){\n    setError(err);\n  }\n  \n  setLoading(false);\n}\n\nconst handleSearch = event=> {\n  event.preventDefault();\n  getResults();\n}\n\nconst handleClearSearch = ()=>{\n  setQuery(\"\");\n  searchInputRef.current.focus();\n}\n\n  return(\n    <>\n    <div className=\"container \n    max-w-md mx-auto \n    p-4 m-2 \n    bg-purple-200\" style={classes}>\n      <h1 className=\"text-grey-light\n      font-thin\n      text-5xl\n      \">HookSearch</h1>\n    <form className=\"\n    mb-2\n    \" action=\"\" onSubmit={handleSearch}>\n    <input \n        type=\"text\" \n        onChange={ event => setQuery(event.target.value)}\n        value={query}\n        ref={searchInputRef}\n        className=\"\n        border p-1 rounded\n        \"\n        />\n        <button className=\"\n        bg-orange-500 rounded m-1 p-1\n        \" type=\"submit\" >Search</button>\n        <button className=\"\n        bg-teal-500\n        rounded m-1 p-1\n        text-white\n        \" type=\"button\" onClick={handleClearSearch}>Clear</button>\n        </form>\n    {loading? <div className=\"font-bold text-orange-600\">Loading Results...</div> : (<ul>\n    {\n      results.map(result => (\n        <li key={result.objectID}>\n          <a className=\"\n            text-indigo-600 \n            hover:text-indigo-800\n          \" href={result.url}>{result.title}</a>\n          </li>\n      ))\n    }\n    </ul>)}\n  {error && <div className=\"text-red-500 font-bold\">{error.message}</div>}\n    </div>\n    </>\n\n  )\n}\n"],"sourceRoot":""}